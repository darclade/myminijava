/* Generated by JTB 1.4.4 */


options
{
  DEBUG_LOOKAHEAD = true;
  DEBUG_PARSER = true;
}

PARSER_BEGIN(eg1)
import syntaxtree.*;


public class eg1 {

  /*
   * JTB generated return variables declarations
   */

  /** Return variable for {@link #Go} production */
  static int jtbrt_Go;

  public static void main(String args[]) throws ParseException{
    eg1 parser = new eg1(System.in);
    while (true) {
      try {
        if (eg1.Go() == null) {
          System.out.println("OK.");
          break;
        } else {
          System.out.println("Goodbye.");
          break;
        }
      }
      catch (Exception e) {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
        eg1.ReInit(System.in);
      }
      catch (Error e) {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        break;
      }
    } 
  }
}

class JTBToolkit {

  static NodeToken makeNodeToken(final Token t) {
    return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
  }
}

PARSER_END(eg1)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

MORE :
{
  "/*" : IN_COMMENT
}

<IN_COMMENT>
MORE :
{
  < ~[] >
}

<IN_COMMENT>
SKIP :
{
  "*/" : DEFAULT
}

MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  < SINGLE_LINE_COMMENT : "\n"| "\r"| "\r\n" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT>
MORE :
{
  < ~[] >
}

TOKEN :
{
  < NEW : "new" >
| < CLASS : "class" >
| < INT : "int" >
| < PUBLIC : "public" >
| < BOOLEAN : "boolean" >
| < STATIC : "static" >
| < IF : "if" >
| < VOID : "void" >
| < ELSE : "else" >
| < MAIN : "main" >
| < WHILE : "while" >
| < STRING : "String" >
| < PRINT : "System.out.println" >
| < EXTENDS : "extends" >
| < LENGTH : "length" >
| < RETURN : "return" >
| < TRUE : "true" >
| < THIS : "this" >
| < FALSE : "false" >
| < IDENTIFIER : ["a"-"z", "A"-"Z"] ( ["a"-"z", "A"-"Z", "0"-"9", "_"] )* >
| < INTEGER : ( ["0"-"9"] )+ >
| < COMMA : "," >
| < STAR : "*" >
| < LBRACE : "{" >
| < ASSIGN : "=" >
| < RBRACE : "}" >
| < AND : "&&" >
| < LPAREN : "(" >
| < LESS : "<" >
| < RPAREN : ")" >
| < PLUS : "+" >
| < LBRACKET : "[" >
| < MINUS : "-" >
| < RBRACKET : "]" >
| < PERIOD : "." >
| < NOT : "!" >
| < SEMICOLON : ";" >
}

Go Go() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  MainClass n2 = null;
  NodeListOptional n3 = new NodeListOptional();
  ClassDeclaration n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
}
{
  try {
    (
      { n1 = new NodeSequence(4); }
      n2 = MainClass()
      { n1.addNode(n2); }
      (
        n4 = ClassDeclaration()
        { n3.addNode(n4); }
      )*
      { n3.nodes.trimToSize(); }
      { n1.addNode(n3); }
      n6 = < EOF > {
        n6.beginColumn++;
        n6.endColumn++;
        { n5 = JTBToolkit.makeNodeToken(n6); }
      }
      { n1.addNode(n5); }
      {
        jtbrt_Go = 0;
      }
      { n0 = new NodeChoice(n1, 0, 2); }
    |
      n8 = < EOF > {
        n8.beginColumn++;
        n8.endColumn++;
        { n7 = JTBToolkit.makeNodeToken(n8); }
      }
      {
        jtbrt_Go = 1;
      }
      { n0 = new NodeChoice(n7, 1, 2); }
    )
    
  }
  catch (ParseException e) {
    System.out.println(e.toString());
    Token t;
    do {
      t = getNextToken();
    } while (t.kind != EOF);
    jtbrt_Go = 1;
  }
  { return new Go(n0); }
}

MainClass MainClass() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Identifier n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
  NodeToken n15 = null;
  Token n16 = null;
  NodeToken n17 = null;
  Token n18 = null;
  NodeToken n19 = null;
  Token n20 = null;
  Identifier n21 = null;
  NodeToken n22 = null;
  Token n23 = null;
  NodeToken n24 = null;
  Token n25 = null;
  Statement n26 = null;
  NodeToken n27 = null;
  Token n28 = null;
  NodeToken n29 = null;
  Token n30 = null;
}
{
  try {
    n1 = < CLASS >
    { n0 = JTBToolkit.makeNodeToken(n1); }
    n2 = Identifier()
    n4 = "{"
    { n3 = JTBToolkit.makeNodeToken(n4); }
    n6 = < PUBLIC >
    { n5 = JTBToolkit.makeNodeToken(n6); }
    n8 = < STATIC >
    { n7 = JTBToolkit.makeNodeToken(n8); }
    n10 = < VOID >
    { n9 = JTBToolkit.makeNodeToken(n10); }
    n12 = < MAIN >
    { n11 = JTBToolkit.makeNodeToken(n12); }
    n14 = "("
    { n13 = JTBToolkit.makeNodeToken(n14); }
    n16 = "String"
    { n15 = JTBToolkit.makeNodeToken(n16); }
    n18 = "["
    { n17 = JTBToolkit.makeNodeToken(n18); }
    n20 = "]"
    { n19 = JTBToolkit.makeNodeToken(n20); }
    n21 = Identifier()
    n23 = ")"
    { n22 = JTBToolkit.makeNodeToken(n23); }
    n25 = "{"
    { n24 = JTBToolkit.makeNodeToken(n25); }
    n26 = Statement()
    n28 = "}"
    { n27 = JTBToolkit.makeNodeToken(n28); }
    n30 = "}"
    { n29 = JTBToolkit.makeNodeToken(n30); }
    
  }
  catch (ParseException e) {
    System.out.println(e.toString());
    Token t;
    do {
      t = getNextToken();
    } while (t.kind != RBRACE);
  }
  { return new MainClass(n0, n2, n3, n5, n7, n9, n11, n13, n15, n17, n19, n21, n22, n24, n26, n27, n29); }
}

ClassDeclaration ClassDeclaration() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Identifier n2 = null;
  NodeOptional n3 = new NodeOptional();
  NodeSequence n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  Identifier n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NodeListOptional n10 = new NodeListOptional();
  VarDeclaration n11 = null;
  NodeListOptional n12 = new NodeListOptional();
  MethodDeclaration n13 = null;
  NodeToken n14 = null;
  Token n15 = null;
}
{
  try {
    n1 = < CLASS >
    { n0 = JTBToolkit.makeNodeToken(n1); }
    n2 = Identifier()
    (
      { n4 = new NodeSequence(2); }
      n6 = < EXTENDS >
      { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
      n7 = Identifier()
      { n4.addNode(n7); }
      { n3.addNode(n4); }
    )?
    n9 = "{"
    { n8 = JTBToolkit.makeNodeToken(n9); }
    (
      n11 = VarDeclaration()
      { n10.addNode(n11); }
    )*
    { n10.nodes.trimToSize(); }
    (
      n13 = MethodDeclaration()
      { n12.addNode(n13); }
    )*
    { n12.nodes.trimToSize(); }
    n15 = "}"
    { n14 = JTBToolkit.makeNodeToken(n15); }
    
  }
  catch (ParseException e) {
    System.out.println(e.toString());
    Token t;
    do {
      t = getNextToken();
    } while (t.kind != RBRACE);
  }
  { return new ClassDeclaration(n0, n2, n3, n8, n10, n12, n14); }
}

VarDeclaration VarDeclaration() :
{
  // --- JTB generated node declarations ---
  Type n0 = null;
  Identifier n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
}
{
  try {
    n0 = Type()
    n1 = Identifier()
    n3 = ";"
    { n2 = JTBToolkit.makeNodeToken(n3); }
    
  }
  catch (ParseException e) {
    System.out.println(e.toString());
    Token t;
    do {
      t = getNextToken();
    } while (t.kind != SEMICOLON);
  }
  { return new VarDeclaration(n0, n1, n2); }
}

MethodDeclaration MethodDeclaration() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Type n2 = null;
  Identifier n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeOptional n6 = new NodeOptional();
  NodeSequence n7 = null;
  Type n8 = null;
  Identifier n9 = null;
  NodeListOptional n10 = null;
  NodeSequence n11 = null;
  NodeToken n12 = null;
  Token n13 = null;
  Type n14 = null;
  Identifier n15 = null;
  NodeToken n16 = null;
  Token n17 = null;
  NodeToken n18 = null;
  Token n19 = null;
  NodeListOptional n20 = new NodeListOptional();
  VarDeclaration n21 = null;
  NodeListOptional n22 = new NodeListOptional();
  Statement n23 = null;
  NodeToken n24 = null;
  Token n25 = null;
  Expression n26 = null;
  NodeToken n27 = null;
  Token n28 = null;
  NodeToken n29 = null;
  Token n30 = null;
}
{
  try {
    n1 = < PUBLIC >
    { n0 = JTBToolkit.makeNodeToken(n1); }
    n2 = Type()
    n3 = Identifier()
    n5 = "("
    { n4 = JTBToolkit.makeNodeToken(n5); }
    (
      { n10 = new NodeListOptional(); }
      { n7 = new NodeSequence(3); }
      n8 = Type()
      { n7.addNode(n8); }
      n9 = Identifier()
      { n7.addNode(n9); }
      (
        { n11 = new NodeSequence(3); }
        n13 = ","
        { n12 = JTBToolkit.makeNodeToken(n13); }
        { n11.addNode(n12); }
        n14 = Type()
        { n11.addNode(n14); }
        n15 = Identifier()
        { n11.addNode(n15); }
        { n10.addNode(n11); }
      )*
      { n10.nodes.trimToSize(); }
      { n7.addNode(n10); }
      { n6.addNode(n7); }
    )?
    n17 = ")"
    { n16 = JTBToolkit.makeNodeToken(n17); }
    n19 = "{"
    { n18 = JTBToolkit.makeNodeToken(n19); }
    (
      LOOKAHEAD( 2 )
      n21 = VarDeclaration()
      { n20.addNode(n21); }
    )*
    { n20.nodes.trimToSize(); }
    (
      n23 = Statement()
      { n22.addNode(n23); }
    )*
    { n22.nodes.trimToSize(); }
    n25 = < RETURN >
    { n24 = JTBToolkit.makeNodeToken(n25); }
    n26 = Expression()
    n28 = ";"
    { n27 = JTBToolkit.makeNodeToken(n28); }
    n30 = "}"
    { n29 = JTBToolkit.makeNodeToken(n30); }
    
  }
  catch (ParseException e) {
    System.out.println(e.toString());
    Token t;
    do {
      t = getNextToken();
    } while (t.kind != RBRACE);
  }
  { return new MethodDeclaration(n0, n2, n3, n4, n6, n16, n18, n20, n22, n24, n26, n27, n29); }
}

Type Type() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  TypeLine n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  Identifier n7 = null;
}
{
  (
    { n1 = new NodeSequence(2); }
    n3 = < INT >
    { n2 = JTBToolkit.makeNodeToken(n3); }
    { n1.addNode(n2); }
    n4 = TypeLine()
    { n1.addNode(n4); }
    { n0 = new NodeChoice(n1, 0, 3); }
  |
    n6 = < BOOLEAN >
    { n5 = JTBToolkit.makeNodeToken(n6); }
    { n0 = new NodeChoice(n5, 1, 3); }
  |
    n7 = Identifier()
    { n0 = new NodeChoice(n7, 2, 3); }
  )
  { return new Type(n0); }
}

TypeLine TypeLine() :
{
  // --- JTB generated node declarations ---
  NodeOptional n0 = new NodeOptional();
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
}
{
  (
    { n1 = new NodeSequence(2); }
    n3 = "["
    { n2 = JTBToolkit.makeNodeToken(n3); }
    { n1.addNode(n2); }
    n5 = "]"
    { n4 = JTBToolkit.makeNodeToken(n5); }
    { n1.addNode(n4); }
    { n0.addNode(n1); }
  )?
  { return new TypeLine(n0); }
}

Statement Statement() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeListOptional n4 = new NodeListOptional();
  Statement n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  NodeSequence n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  Expression n13 = null;
  NodeToken n14 = null;
  Token n15 = null;
  Statement n16 = null;
  NodeToken n17 = null;
  Token n18 = null;
  Statement n19 = null;
  NodeSequence n20 = null;
  NodeToken n21 = null;
  Token n22 = null;
  NodeToken n23 = null;
  Token n24 = null;
  Expression n25 = null;
  NodeToken n26 = null;
  Token n27 = null;
  Statement n28 = null;
  NodeSequence n29 = null;
  NodeToken n30 = null;
  Token n31 = null;
  NodeToken n32 = null;
  Token n33 = null;
  Expression n34 = null;
  NodeToken n35 = null;
  Token n36 = null;
  NodeToken n37 = null;
  Token n38 = null;
  NodeSequence n39 = null;
  Identifier n40 = null;
  StatementLine n41 = null;
}
{
  (
    try {
      { n1 = new NodeSequence(3); }
      n3 = "{"
      { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1.addNode(n2); }
      (
        n5 = Statement()
        { n4.addNode(n5); }
      )*
      { n4.nodes.trimToSize(); }
      { n1.addNode(n4); }
      n7 = "}"
      { n6 = JTBToolkit.makeNodeToken(n7); }
      { n1.addNode(n6); }
      
    }
    catch (ParseException e) {
      System.out.println(e.toString());
      Token t;
      do {
        t = getNextToken();
      } while (t.kind != RBRACE);
    }
    { n0 = new NodeChoice(n1, 0, 5); }
  |
    { n8 = new NodeSequence(7); }
    n10 = < IF >
    { n9 = JTBToolkit.makeNodeToken(n10); }
    { n8.addNode(n9); }
    n12 = "("
    { n11 = JTBToolkit.makeNodeToken(n12); }
    { n8.addNode(n11); }
    n13 = Expression()
    { n8.addNode(n13); }
    n15 = ")"
    { n14 = JTBToolkit.makeNodeToken(n15); }
    { n8.addNode(n14); }
    n16 = Statement()
    { n8.addNode(n16); }
    n18 = < ELSE >
    { n17 = JTBToolkit.makeNodeToken(n18); }
    { n8.addNode(n17); }
    n19 = Statement()
    { n8.addNode(n19); }
    { n0 = new NodeChoice(n8, 1, 5); }
  |
    { n20 = new NodeSequence(5); }
    n22 = < WHILE >
    { n21 = JTBToolkit.makeNodeToken(n22); }
    { n20.addNode(n21); }
    n24 = "("
    { n23 = JTBToolkit.makeNodeToken(n24); }
    { n20.addNode(n23); }
    n25 = Expression()
    { n20.addNode(n25); }
    n27 = ")"
    { n26 = JTBToolkit.makeNodeToken(n27); }
    { n20.addNode(n26); }
    n28 = Statement()
    { n20.addNode(n28); }
    { n0 = new NodeChoice(n20, 2, 5); }
  |
    try {
      { n29 = new NodeSequence(5); }
      n31 = "System.out.println"
      { n30 = JTBToolkit.makeNodeToken(n31); }
      { n29.addNode(n30); }
      n33 = "("
      { n32 = JTBToolkit.makeNodeToken(n33); }
      { n29.addNode(n32); }
      n34 = Expression()
      { n29.addNode(n34); }
      n36 = ")"
      { n35 = JTBToolkit.makeNodeToken(n36); }
      { n29.addNode(n35); }
      n38 = ";"
      { n37 = JTBToolkit.makeNodeToken(n38); }
      { n29.addNode(n37); }
      
    }
    catch (ParseException e) {
      System.out.println(e.toString());
      Token t;
      do {
        t = getNextToken();
      } while (t.kind != SEMICOLON);
    }
    { n0 = new NodeChoice(n29, 3, 5); }
  |
    try {
      { n39 = new NodeSequence(2); }
      n40 = Identifier()
      { n39.addNode(n40); }
      n41 = StatementLine()
      { n39.addNode(n41); }
      
    }
    catch (ParseException e) {
      System.out.println(e.toString());
      Token t;
      do {
        t = getNextToken();
      } while (t.kind != SEMICOLON);
    }
    { n0 = new NodeChoice(n39, 4, 5); }
  )
  { return new Statement(n0); }
}

StatementLine StatementLine() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  Expression n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeSequence n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  Expression n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
  Expression n15 = null;
  NodeToken n16 = null;
  Token n17 = null;
}
{
  (
    { n1 = new NodeSequence(3); }
    n3 = "="
    { n2 = JTBToolkit.makeNodeToken(n3); }
    { n1.addNode(n2); }
    n4 = Expression()
    { n1.addNode(n4); }
    n6 = ";"
    { n5 = JTBToolkit.makeNodeToken(n6); }
    { n1.addNode(n5); }
    { n0 = new NodeChoice(n1, 0, 2); }
  |
    { n7 = new NodeSequence(6); }
    n9 = "["
    { n8 = JTBToolkit.makeNodeToken(n9); }
    { n7.addNode(n8); }
    n10 = Expression()
    { n7.addNode(n10); }
    n12 = "]"
    { n11 = JTBToolkit.makeNodeToken(n12); }
    { n7.addNode(n11); }
    n14 = "="
    { n13 = JTBToolkit.makeNodeToken(n14); }
    { n7.addNode(n13); }
    n15 = Expression()
    { n7.addNode(n15); }
    n17 = ";"
    { n16 = JTBToolkit.makeNodeToken(n17); }
    { n7.addNode(n16); }
    { n0 = new NodeChoice(n7, 1, 2); }
  )
  { return new StatementLine(n0); }
}

Expression Expression() :
{
  // --- JTB generated node declarations ---
  AExpression n0 = null;
  NodeOptional n1 = new NodeOptional();
  ExpressionLine n2 = null;
}
{
  try {
    n0 = AExpression()
    (
      LOOKAHEAD( 2 )
      n2 = ExpressionLine()
      { n1.addNode(n2); }
    )?
    
  }
  catch (ParseException e) {
    System.out.println(e.toString());
    Token t;
    do {
      t = getNextToken();
    } while (t.kind != SEMICOLON);
  }
  { return new Expression(n0, n1); }
}

ExpressionLine ExpressionLine() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeChoice n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  Expression n13 = null;
  NodeOptional n14 = new NodeOptional();
  ExpressionLine n15 = null;
  NodeSequence n16 = null;
  NodeToken n17 = null;
  Token n18 = null;
  Expression n19 = null;
  NodeToken n20 = null;
  Token n21 = null;
  NodeOptional n22 = new NodeOptional();
  ExpressionLine n23 = null;
  NodeSequence n24 = null;
  NodeToken n25 = null;
  Token n26 = null;
  ExpressionLineTwo n27 = null;
}
{
  (
    { n1 = new NodeSequence(3); }
    (
      (
        n4 = < AND >
        { n3 = JTBToolkit.makeNodeToken(n4); }
        { n2 = new NodeChoice(n3, 0, 5); }
      |
        n6 = < LESS >
        { n5 = JTBToolkit.makeNodeToken(n6); }
        { n2 = new NodeChoice(n5, 1, 5); }
      |
        n8 = < PLUS >
        { n7 = JTBToolkit.makeNodeToken(n8); }
        { n2 = new NodeChoice(n7, 2, 5); }
      |
        n10 = < MINUS >
        { n9 = JTBToolkit.makeNodeToken(n10); }
        { n2 = new NodeChoice(n9, 3, 5); }
      |
        n12 = < STAR >
        { n11 = JTBToolkit.makeNodeToken(n12); }
        { n2 = new NodeChoice(n11, 4, 5); }
      )
      
    )
    { n1.addNode(n2); }
    n13 = Expression()
    { n1.addNode(n13); }
    (
      LOOKAHEAD( 2 )
      n15 = ExpressionLine()
      { n14.addNode(n15); }
    )?
    { n1.addNode(n14); }
    { n0 = new NodeChoice(n1, 0, 3); }
  |
    { n16 = new NodeSequence(4); }
    n18 = "["
    { n17 = JTBToolkit.makeNodeToken(n18); }
    { n16.addNode(n17); }
    n19 = Expression()
    { n16.addNode(n19); }
    n21 = "]"
    { n20 = JTBToolkit.makeNodeToken(n21); }
    { n16.addNode(n20); }
    (
      LOOKAHEAD( 2 )
      n23 = ExpressionLine()
      { n22.addNode(n23); }
    )?
    { n16.addNode(n22); }
    { n0 = new NodeChoice(n16, 1, 3); }
  |
    { n24 = new NodeSequence(2); }
    n26 = "."
    { n25 = JTBToolkit.makeNodeToken(n26); }
    { n24.addNode(n25); }
    n27 = ExpressionLineTwo()
    { n24.addNode(n27); }
    { n0 = new NodeChoice(n24, 2, 3); }
  )
  { return new ExpressionLine(n0); }
}

ExpressionLineTwo ExpressionLineTwo() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeOptional n4 = new NodeOptional();
  ExpressionLine n5 = null;
  NodeSequence n6 = null;
  Identifier n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NodeOptional n10 = new NodeOptional();
  NodeSequence n11 = null;
  Expression n12 = null;
  NodeListOptional n13 = null;
  NodeSequence n14 = null;
  NodeToken n15 = null;
  Token n16 = null;
  Expression n17 = null;
  NodeToken n18 = null;
  Token n19 = null;
  NodeOptional n20 = new NodeOptional();
  ExpressionLine n21 = null;
}
{
  (
    { n1 = new NodeSequence(2); }
    n3 = "length"
    { n2 = JTBToolkit.makeNodeToken(n3); }
    { n1.addNode(n2); }
    (
      LOOKAHEAD( 2 )
      n5 = ExpressionLine()
      { n4.addNode(n5); }
    )?
    { n1.addNode(n4); }
    { n0 = new NodeChoice(n1, 0, 2); }
  |
    { n6 = new NodeSequence(5); }
    n7 = Identifier()
    { n6.addNode(n7); }
    n9 = "("
    { n8 = JTBToolkit.makeNodeToken(n9); }
    { n6.addNode(n8); }
    (
      { n13 = new NodeListOptional(); }
      { n11 = new NodeSequence(2); }
      n12 = Expression()
      { n11.addNode(n12); }
      (
        { n14 = new NodeSequence(2); }
        n16 = ","
        { n15 = JTBToolkit.makeNodeToken(n16); }
        { n14.addNode(n15); }
        n17 = Expression()
        { n14.addNode(n17); }
        { n13.addNode(n14); }
      )*
      { n13.nodes.trimToSize(); }
      { n11.addNode(n13); }
      { n10.addNode(n11); }
    )?
    { n6.addNode(n10); }
    n19 = ")"
    { n18 = JTBToolkit.makeNodeToken(n19); }
    { n6.addNode(n18); }
    (
      LOOKAHEAD( 2 )
      n21 = ExpressionLine()
      { n20.addNode(n21); }
    )?
    { n6.addNode(n20); }
    { n0 = new NodeChoice(n6, 1, 2); }
  )
  { return new ExpressionLineTwo(n0); }
}

AExpression AExpression() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  Identifier n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NodeSequence n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NewLine n13 = null;
  NodeSequence n14 = null;
  NodeToken n15 = null;
  Token n16 = null;
  Expression n17 = null;
  NodeSequence n18 = null;
  NodeToken n19 = null;
  Token n20 = null;
  Expression n21 = null;
  NodeToken n22 = null;
  Token n23 = null;
}
{
  (
    n2 = < INTEGER >
    { n1 = JTBToolkit.makeNodeToken(n2); }
    { n0 = new NodeChoice(n1, 0, 8); }
  |
    n4 = "true"
    { n3 = JTBToolkit.makeNodeToken(n4); }
    { n0 = new NodeChoice(n3, 1, 8); }
  |
    n6 = "false"
    { n5 = JTBToolkit.makeNodeToken(n6); }
    { n0 = new NodeChoice(n5, 2, 8); }
  |
    n7 = Identifier()
    { n0 = new NodeChoice(n7, 3, 8); }
  |
    n9 = "this"
    { n8 = JTBToolkit.makeNodeToken(n9); }
    { n0 = new NodeChoice(n8, 4, 8); }
  |
    { n10 = new NodeSequence(2); }
    n12 = "new"
    { n11 = JTBToolkit.makeNodeToken(n12); }
    { n10.addNode(n11); }
    n13 = NewLine()
    { n10.addNode(n13); }
    { n0 = new NodeChoice(n10, 5, 8); }
  |
    { n14 = new NodeSequence(2); }
    n16 = "!"
    { n15 = JTBToolkit.makeNodeToken(n16); }
    { n14.addNode(n15); }
    n17 = Expression()
    { n14.addNode(n17); }
    { n0 = new NodeChoice(n14, 6, 8); }
  |
    { n18 = new NodeSequence(3); }
    n20 = "("
    { n19 = JTBToolkit.makeNodeToken(n20); }
    { n18.addNode(n19); }
    n21 = Expression()
    { n18.addNode(n21); }
    n23 = ")"
    { n22 = JTBToolkit.makeNodeToken(n23); }
    { n18.addNode(n22); }
    { n0 = new NodeChoice(n18, 7, 8); }
  )
  { return new AExpression(n0); }
}

NewLine NewLine() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  Expression n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeSequence n9 = null;
  Identifier n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
}
{
  (
    { n1 = new NodeSequence(4); }
    n3 = < INT >
    { n2 = JTBToolkit.makeNodeToken(n3); }
    { n1.addNode(n2); }
    n5 = "["
    { n4 = JTBToolkit.makeNodeToken(n5); }
    { n1.addNode(n4); }
    n6 = Expression()
    { n1.addNode(n6); }
    n8 = "]"
    { n7 = JTBToolkit.makeNodeToken(n8); }
    { n1.addNode(n7); }
    { n0 = new NodeChoice(n1, 0, 2); }
  |
    { n9 = new NodeSequence(3); }
    n10 = Identifier()
    { n9.addNode(n10); }
    n12 = "("
    { n11 = JTBToolkit.makeNodeToken(n12); }
    { n9.addNode(n11); }
    n14 = ")"
    { n13 = JTBToolkit.makeNodeToken(n14); }
    { n9.addNode(n13); }
    { n0 = new NodeChoice(n9, 1, 2); }
  )
  { return new NewLine(n0); }
}

Identifier Identifier() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
}
{
  n1 = < IDENTIFIER >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  { return new Identifier(n0); }
}
