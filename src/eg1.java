/* Generated By:JavaCC: Do not edit this line. eg1.java */
import syntaxtree.*;


public class eg1 implements eg1Constants {

  /*
   * JTB generated return variables declarations
   */

  /** Return variable for {@link #Go} production */
  static int jtbrt_Go;

  public static void main(String args[]) throws ParseException{
    eg1 parser = new eg1(System.in);
    while (true) {
      try {
        if (eg1.Go() == null) {
          System.out.println("OK.");
          break;
        } else {
          System.out.println("Goodbye.");
          break;
        }
      }
      catch (Exception e) {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
        eg1.ReInit(System.in);
      }
      catch (Error e) {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        break;
      }
    }
  }

  static final public Go Go() throws ParseException {
    trace_call("Go");
    try {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  MainClass n2 = null;
  NodeListOptional n3 = new NodeListOptional();
  ClassDeclaration n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CLASS:
        n1 = new NodeSequence(4);
          n2 = MainClass();
        n1.addNode(n2);
          label_1:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case CLASS:
              ;
              break;
            default:
              jj_la1[0] = jj_gen;
              break label_1;
            }
            n4 = ClassDeclaration();
          n3.addNode(n4);
          }
        n3.nodes.trimToSize();
        n1.addNode(n3);
          n6 = jj_consume_token(0);
        n6.beginColumn++;
        n6.endColumn++;
        { n5 = JTBToolkit.makeNodeToken(n6); }
        n1.addNode(n5);
        jtbrt_Go = 0;
        n0 = new NodeChoice(n1, 0, 2);
          break;
        case 0:
          n8 = jj_consume_token(0);
        n8.beginColumn++;
        n8.endColumn++;
        { n7 = JTBToolkit.makeNodeToken(n8); }
        jtbrt_Go = 1;
        n0 = new NodeChoice(n7, 1, 2);
          break;
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (ParseException e) {
    System.out.println(e.toString());
    Token t;
    do {
      t = getNextToken();
    } while (t.kind != EOF);
    jtbrt_Go = 1;
      }
    {if (true) return new Go(n0);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Go");
    }
  }

  static final public MainClass MainClass() throws ParseException {
    trace_call("MainClass");
    try {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Identifier n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
  NodeToken n15 = null;
  Token n16 = null;
  NodeToken n17 = null;
  Token n18 = null;
  NodeToken n19 = null;
  Token n20 = null;
  Identifier n21 = null;
  NodeToken n22 = null;
  Token n23 = null;
  NodeToken n24 = null;
  Token n25 = null;
  Statement n26 = null;
  NodeToken n27 = null;
  Token n28 = null;
  NodeToken n29 = null;
  Token n30 = null;
      try {
        n1 = jj_consume_token(CLASS);
      n0 = JTBToolkit.makeNodeToken(n1);
        n2 = Identifier();
        n4 = jj_consume_token(LBRACE);
      n3 = JTBToolkit.makeNodeToken(n4);
        n6 = jj_consume_token(PUBLIC);
      n5 = JTBToolkit.makeNodeToken(n6);
        n8 = jj_consume_token(STATIC);
      n7 = JTBToolkit.makeNodeToken(n8);
        n10 = jj_consume_token(VOID);
      n9 = JTBToolkit.makeNodeToken(n10);
        n12 = jj_consume_token(MAIN);
      n11 = JTBToolkit.makeNodeToken(n12);
        n14 = jj_consume_token(LPAREN);
      n13 = JTBToolkit.makeNodeToken(n14);
        n16 = jj_consume_token(STRING);
      n15 = JTBToolkit.makeNodeToken(n16);
        n18 = jj_consume_token(LBRACKET);
      n17 = JTBToolkit.makeNodeToken(n18);
        n20 = jj_consume_token(RBRACKET);
      n19 = JTBToolkit.makeNodeToken(n20);
        n21 = Identifier();
        n23 = jj_consume_token(RPAREN);
      n22 = JTBToolkit.makeNodeToken(n23);
        n25 = jj_consume_token(LBRACE);
      n24 = JTBToolkit.makeNodeToken(n25);
        n26 = Statement();
        n28 = jj_consume_token(RBRACE);
      n27 = JTBToolkit.makeNodeToken(n28);
        n30 = jj_consume_token(RBRACE);
      n29 = JTBToolkit.makeNodeToken(n30);
      } catch (ParseException e) {
    System.out.println(e.toString());
    Token t;
    do {
      t = getNextToken();
    } while (t.kind != RBRACE);
      }
    {if (true) return new MainClass(n0, n2, n3, n5, n7, n9, n11, n13, n15, n17, n19, n21, n22, n24, n26, n27, n29);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("MainClass");
    }
  }

  static final public ClassDeclaration ClassDeclaration() throws ParseException {
    trace_call("ClassDeclaration");
    try {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Identifier n2 = null;
  NodeOptional n3 = new NodeOptional();
  NodeSequence n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  Identifier n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NodeListOptional n10 = new NodeListOptional();
  VarDeclaration n11 = null;
  NodeListOptional n12 = new NodeListOptional();
  MethodDeclaration n13 = null;
  NodeToken n14 = null;
  Token n15 = null;
      try {
        n1 = jj_consume_token(CLASS);
      n0 = JTBToolkit.makeNodeToken(n1);
        n2 = Identifier();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EXTENDS:
        n4 = new NodeSequence(2);
          n6 = jj_consume_token(EXTENDS);
        n5 = JTBToolkit.makeNodeToken(n6);
        n4.addNode(n5);
          n7 = Identifier();
        n4.addNode(n7);
        n3.addNode(n4);
          break;
        default:
          jj_la1[2] = jj_gen;
          ;
        }
        n9 = jj_consume_token(LBRACE);
      n8 = JTBToolkit.makeNodeToken(n9);
        label_2:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case INT:
          case BOOLEAN:
          case IDENTIFIER:
            ;
            break;
          default:
            jj_la1[3] = jj_gen;
            break label_2;
          }
          n11 = VarDeclaration();
        n10.addNode(n11);
        }
      n10.nodes.trimToSize();
        label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case PUBLIC:
            ;
            break;
          default:
            jj_la1[4] = jj_gen;
            break label_3;
          }
          n13 = MethodDeclaration();
        n12.addNode(n13);
        }
      n12.nodes.trimToSize();
        n15 = jj_consume_token(RBRACE);
      n14 = JTBToolkit.makeNodeToken(n15);
      } catch (ParseException e) {
    System.out.println(e.toString());
    Token t;
    do {
      t = getNextToken();
    } while (t.kind != RBRACE);
      }
    {if (true) return new ClassDeclaration(n0, n2, n3, n8, n10, n12, n14);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("ClassDeclaration");
    }
  }

  static final public VarDeclaration VarDeclaration() throws ParseException {
    trace_call("VarDeclaration");
    try {
  // --- JTB generated node declarations ---
  Type n0 = null;
  Identifier n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
      try {
        n0 = Type();
        n1 = Identifier();
        n3 = jj_consume_token(SEMICOLON);
      n2 = JTBToolkit.makeNodeToken(n3);
      } catch (ParseException e) {
    System.out.println(e.toString());
    Token t;
    do {
      t = getNextToken();
    } while (t.kind != SEMICOLON);
      }
    {if (true) return new VarDeclaration(n0, n1, n2);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("VarDeclaration");
    }
  }

  static final public MethodDeclaration MethodDeclaration() throws ParseException {
    trace_call("MethodDeclaration");
    try {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Type n2 = null;
  Identifier n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeOptional n6 = new NodeOptional();
  NodeSequence n7 = null;
  Type n8 = null;
  Identifier n9 = null;
  NodeListOptional n10 = null;
  NodeSequence n11 = null;
  NodeToken n12 = null;
  Token n13 = null;
  Type n14 = null;
  Identifier n15 = null;
  NodeToken n16 = null;
  Token n17 = null;
  NodeToken n18 = null;
  Token n19 = null;
  NodeListOptional n20 = new NodeListOptional();
  VarDeclaration n21 = null;
  NodeListOptional n22 = new NodeListOptional();
  Statement n23 = null;
  NodeToken n24 = null;
  Token n25 = null;
  Expression n26 = null;
  NodeToken n27 = null;
  Token n28 = null;
  NodeToken n29 = null;
  Token n30 = null;
      try {
        n1 = jj_consume_token(PUBLIC);
      n0 = JTBToolkit.makeNodeToken(n1);
        n2 = Type();
        n3 = Identifier();
        n5 = jj_consume_token(LPAREN);
      n4 = JTBToolkit.makeNodeToken(n5);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INT:
        case BOOLEAN:
        case IDENTIFIER:
        n10 = new NodeListOptional();
        n7 = new NodeSequence(3);
          n8 = Type();
        n7.addNode(n8);
          n9 = Identifier();
        n7.addNode(n9);
          label_4:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              ;
              break;
            default:
              jj_la1[5] = jj_gen;
              break label_4;
            }
          n11 = new NodeSequence(3);
            n13 = jj_consume_token(COMMA);
          n12 = JTBToolkit.makeNodeToken(n13);
          n11.addNode(n12);
            n14 = Type();
          n11.addNode(n14);
            n15 = Identifier();
          n11.addNode(n15);
          n10.addNode(n11);
          }
        n10.nodes.trimToSize();
        n7.addNode(n10);
        n6.addNode(n7);
          break;
        default:
          jj_la1[6] = jj_gen;
          ;
        }
        n17 = jj_consume_token(RPAREN);
      n16 = JTBToolkit.makeNodeToken(n17);
        n19 = jj_consume_token(LBRACE);
      n18 = JTBToolkit.makeNodeToken(n19);
        label_5:
        while (true) {
          if (jj_2_1(2)) {
            ;
          } else {
            break label_5;
          }
          n21 = VarDeclaration();
        n20.addNode(n21);
        }
      n20.nodes.trimToSize();
        label_6:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IF:
          case WHILE:
          case PRINT:
          case IDENTIFIER:
          case LBRACE:
            ;
            break;
          default:
            jj_la1[7] = jj_gen;
            break label_6;
          }
          n23 = Statement();
        n22.addNode(n23);
        }
      n22.nodes.trimToSize();
        n25 = jj_consume_token(RETURN);
      n24 = JTBToolkit.makeNodeToken(n25);
        n26 = Expression();
        n28 = jj_consume_token(SEMICOLON);
      n27 = JTBToolkit.makeNodeToken(n28);
        n30 = jj_consume_token(RBRACE);
      n29 = JTBToolkit.makeNodeToken(n30);
      } catch (ParseException e) {
    System.out.println(e.toString());
    Token t;
    do {
      t = getNextToken();
    } while (t.kind != RBRACE);
      }
    {if (true) return new MethodDeclaration(n0, n2, n3, n4, n6, n16, n18, n20, n22, n24, n26, n27, n29);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("MethodDeclaration");
    }
  }

  static final public Type Type() throws ParseException {
    trace_call("Type");
    try {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  TypeLine n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  Identifier n7 = null;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
      n1 = new NodeSequence(2);
        n3 = jj_consume_token(INT);
      n2 = JTBToolkit.makeNodeToken(n3);
      n1.addNode(n2);
        n4 = TypeLine();
      n1.addNode(n4);
      n0 = new NodeChoice(n1, 0, 3);
        break;
      case BOOLEAN:
        n6 = jj_consume_token(BOOLEAN);
      n5 = JTBToolkit.makeNodeToken(n6);
      n0 = new NodeChoice(n5, 1, 3);
        break;
      case IDENTIFIER:
        n7 = Identifier();
      n0 = new NodeChoice(n7, 2, 3);
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    {if (true) return new Type(n0);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Type");
    }
  }

  static final public TypeLine TypeLine() throws ParseException {
    trace_call("TypeLine");
    try {
  // --- JTB generated node declarations ---
  NodeOptional n0 = new NodeOptional();
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
      n1 = new NodeSequence(2);
        n3 = jj_consume_token(LBRACKET);
      n2 = JTBToolkit.makeNodeToken(n3);
      n1.addNode(n2);
        n5 = jj_consume_token(RBRACKET);
      n4 = JTBToolkit.makeNodeToken(n5);
      n1.addNode(n4);
      n0.addNode(n1);
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
    {if (true) return new TypeLine(n0);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("TypeLine");
    }
  }

  static final public Statement Statement() throws ParseException {
    trace_call("Statement");
    try {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeListOptional n4 = new NodeListOptional();
  Statement n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  NodeSequence n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  Expression n13 = null;
  NodeToken n14 = null;
  Token n15 = null;
  Statement n16 = null;
  NodeToken n17 = null;
  Token n18 = null;
  Statement n19 = null;
  NodeSequence n20 = null;
  NodeToken n21 = null;
  Token n22 = null;
  NodeToken n23 = null;
  Token n24 = null;
  Expression n25 = null;
  NodeToken n26 = null;
  Token n27 = null;
  Statement n28 = null;
  NodeSequence n29 = null;
  NodeToken n30 = null;
  Token n31 = null;
  NodeToken n32 = null;
  Token n33 = null;
  Expression n34 = null;
  NodeToken n35 = null;
  Token n36 = null;
  NodeToken n37 = null;
  Token n38 = null;
  NodeSequence n39 = null;
  Identifier n40 = null;
  StatementLine n41 = null;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
        try {
        n1 = new NodeSequence(3);
          n3 = jj_consume_token(LBRACE);
        n2 = JTBToolkit.makeNodeToken(n3);
        n1.addNode(n2);
          label_7:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case IF:
            case WHILE:
            case PRINT:
            case IDENTIFIER:
            case LBRACE:
              ;
              break;
            default:
              jj_la1[10] = jj_gen;
              break label_7;
            }
            n5 = Statement();
          n4.addNode(n5);
          }
        n4.nodes.trimToSize();
        n1.addNode(n4);
          n7 = jj_consume_token(RBRACE);
        n6 = JTBToolkit.makeNodeToken(n7);
        n1.addNode(n6);
        } catch (ParseException e) {
      System.out.println(e.toString());
      Token t;
      do {
        t = getNextToken();
      } while (t.kind != RBRACE);
        }
      n0 = new NodeChoice(n1, 0, 5);
        break;
      case IF:
      n8 = new NodeSequence(7);
        n10 = jj_consume_token(IF);
      n9 = JTBToolkit.makeNodeToken(n10);
      n8.addNode(n9);
        n12 = jj_consume_token(LPAREN);
      n11 = JTBToolkit.makeNodeToken(n12);
      n8.addNode(n11);
        n13 = Expression();
      n8.addNode(n13);
        n15 = jj_consume_token(RPAREN);
      n14 = JTBToolkit.makeNodeToken(n15);
      n8.addNode(n14);
        n16 = Statement();
      n8.addNode(n16);
        n18 = jj_consume_token(ELSE);
      n17 = JTBToolkit.makeNodeToken(n18);
      n8.addNode(n17);
        n19 = Statement();
      n8.addNode(n19);
      n0 = new NodeChoice(n8, 1, 5);
        break;
      case WHILE:
      n20 = new NodeSequence(5);
        n22 = jj_consume_token(WHILE);
      n21 = JTBToolkit.makeNodeToken(n22);
      n20.addNode(n21);
        n24 = jj_consume_token(LPAREN);
      n23 = JTBToolkit.makeNodeToken(n24);
      n20.addNode(n23);
        n25 = Expression();
      n20.addNode(n25);
        n27 = jj_consume_token(RPAREN);
      n26 = JTBToolkit.makeNodeToken(n27);
      n20.addNode(n26);
        n28 = Statement();
      n20.addNode(n28);
      n0 = new NodeChoice(n20, 2, 5);
        break;
      case PRINT:
        try {
        n29 = new NodeSequence(5);
          n31 = jj_consume_token(PRINT);
        n30 = JTBToolkit.makeNodeToken(n31);
        n29.addNode(n30);
          n33 = jj_consume_token(LPAREN);
        n32 = JTBToolkit.makeNodeToken(n33);
        n29.addNode(n32);
          n34 = Expression();
        n29.addNode(n34);
          n36 = jj_consume_token(RPAREN);
        n35 = JTBToolkit.makeNodeToken(n36);
        n29.addNode(n35);
          n38 = jj_consume_token(SEMICOLON);
        n37 = JTBToolkit.makeNodeToken(n38);
        n29.addNode(n37);
        } catch (ParseException e) {
      System.out.println(e.toString());
      Token t;
      do {
        t = getNextToken();
      } while (t.kind != SEMICOLON);
        }
      n0 = new NodeChoice(n29, 3, 5);
        break;
      case IDENTIFIER:
        try {
        n39 = new NodeSequence(2);
          n40 = Identifier();
        n39.addNode(n40);
          n41 = StatementLine();
        n39.addNode(n41);
        } catch (ParseException e) {
      System.out.println(e.toString());
      Token t;
      do {
        t = getNextToken();
      } while (t.kind != SEMICOLON);
        }
      n0 = new NodeChoice(n39, 4, 5);
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    {if (true) return new Statement(n0);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Statement");
    }
  }

  static final public StatementLine StatementLine() throws ParseException {
    trace_call("StatementLine");
    try {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  Expression n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeSequence n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  Expression n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
  Expression n15 = null;
  NodeToken n16 = null;
  Token n17 = null;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
      n1 = new NodeSequence(3);
        n3 = jj_consume_token(ASSIGN);
      n2 = JTBToolkit.makeNodeToken(n3);
      n1.addNode(n2);
        n4 = Expression();
      n1.addNode(n4);
        n6 = jj_consume_token(SEMICOLON);
      n5 = JTBToolkit.makeNodeToken(n6);
      n1.addNode(n5);
      n0 = new NodeChoice(n1, 0, 2);
        break;
      case LBRACKET:
      n7 = new NodeSequence(6);
        n9 = jj_consume_token(LBRACKET);
      n8 = JTBToolkit.makeNodeToken(n9);
      n7.addNode(n8);
        n10 = Expression();
      n7.addNode(n10);
        n12 = jj_consume_token(RBRACKET);
      n11 = JTBToolkit.makeNodeToken(n12);
      n7.addNode(n11);
        n14 = jj_consume_token(ASSIGN);
      n13 = JTBToolkit.makeNodeToken(n14);
      n7.addNode(n13);
        n15 = Expression();
      n7.addNode(n15);
        n17 = jj_consume_token(SEMICOLON);
      n16 = JTBToolkit.makeNodeToken(n17);
      n7.addNode(n16);
      n0 = new NodeChoice(n7, 1, 2);
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    {if (true) return new StatementLine(n0);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("StatementLine");
    }
  }

  static final public Expression Expression() throws ParseException {
    trace_call("Expression");
    try {
  // --- JTB generated node declarations ---
  AExpression n0 = null;
  NodeOptional n1 = new NodeOptional();
  ExpressionLine n2 = null;
      try {
        n0 = AExpression();
        if (jj_2_2(2)) {
          n2 = ExpressionLine();
        n1.addNode(n2);
        } else {
          ;
        }
      } catch (ParseException e) {
    System.out.println(e.toString());
    Token t;
    do {
      t = getNextToken();
    } while (t.kind != SEMICOLON);
      }
    {if (true) return new Expression(n0, n1);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Expression");
    }
  }

  static final public ExpressionLine ExpressionLine() throws ParseException {
    trace_call("ExpressionLine");
    try {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeChoice n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  Expression n13 = null;
  NodeOptional n14 = new NodeOptional();
  ExpressionLine n15 = null;
  NodeSequence n16 = null;
  NodeToken n17 = null;
  Token n18 = null;
  Expression n19 = null;
  NodeToken n20 = null;
  Token n21 = null;
  NodeOptional n22 = new NodeOptional();
  ExpressionLine n23 = null;
  NodeSequence n24 = null;
  NodeToken n25 = null;
  Token n26 = null;
  ExpressionLineTwo n27 = null;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
      case AND:
      case LESS:
      case PLUS:
      case MINUS:
      n1 = new NodeSequence(3);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND:
          n4 = jj_consume_token(AND);
          n3 = JTBToolkit.makeNodeToken(n4);
          n2 = new NodeChoice(n3, 0, 5);
          break;
        case LESS:
          n6 = jj_consume_token(LESS);
          n5 = JTBToolkit.makeNodeToken(n6);
          n2 = new NodeChoice(n5, 1, 5);
          break;
        case PLUS:
          n8 = jj_consume_token(PLUS);
          n7 = JTBToolkit.makeNodeToken(n8);
          n2 = new NodeChoice(n7, 2, 5);
          break;
        case MINUS:
          n10 = jj_consume_token(MINUS);
          n9 = JTBToolkit.makeNodeToken(n10);
          n2 = new NodeChoice(n9, 3, 5);
          break;
        case STAR:
          n12 = jj_consume_token(STAR);
          n11 = JTBToolkit.makeNodeToken(n12);
          n2 = new NodeChoice(n11, 4, 5);
          break;
        default:
          jj_la1[13] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      n1.addNode(n2);
        n13 = Expression();
      n1.addNode(n13);
        if (jj_2_3(2)) {
          n15 = ExpressionLine();
        n14.addNode(n15);
        } else {
          ;
        }
      n1.addNode(n14);
      n0 = new NodeChoice(n1, 0, 3);
        break;
      case LBRACKET:
      n16 = new NodeSequence(4);
        n18 = jj_consume_token(LBRACKET);
      n17 = JTBToolkit.makeNodeToken(n18);
      n16.addNode(n17);
        n19 = Expression();
      n16.addNode(n19);
        n21 = jj_consume_token(RBRACKET);
      n20 = JTBToolkit.makeNodeToken(n21);
      n16.addNode(n20);
        if (jj_2_4(2)) {
          n23 = ExpressionLine();
        n22.addNode(n23);
        } else {
          ;
        }
      n16.addNode(n22);
      n0 = new NodeChoice(n16, 1, 3);
        break;
      case PERIOD:
      n24 = new NodeSequence(2);
        n26 = jj_consume_token(PERIOD);
      n25 = JTBToolkit.makeNodeToken(n26);
      n24.addNode(n25);
        n27 = ExpressionLineTwo();
      n24.addNode(n27);
      n0 = new NodeChoice(n24, 2, 3);
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    {if (true) return new ExpressionLine(n0);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("ExpressionLine");
    }
  }

  static final public ExpressionLineTwo ExpressionLineTwo() throws ParseException {
    trace_call("ExpressionLineTwo");
    try {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeOptional n4 = new NodeOptional();
  ExpressionLine n5 = null;
  NodeSequence n6 = null;
  Identifier n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NodeOptional n10 = new NodeOptional();
  NodeSequence n11 = null;
  Expression n12 = null;
  NodeListOptional n13 = null;
  NodeSequence n14 = null;
  NodeToken n15 = null;
  Token n16 = null;
  Expression n17 = null;
  NodeToken n18 = null;
  Token n19 = null;
  NodeOptional n20 = new NodeOptional();
  ExpressionLine n21 = null;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LENGTH:
      n1 = new NodeSequence(2);
        n3 = jj_consume_token(LENGTH);
      n2 = JTBToolkit.makeNodeToken(n3);
      n1.addNode(n2);
        if (jj_2_5(2)) {
          n5 = ExpressionLine();
        n4.addNode(n5);
        } else {
          ;
        }
      n1.addNode(n4);
      n0 = new NodeChoice(n1, 0, 2);
        break;
      case IDENTIFIER:
      n6 = new NodeSequence(5);
        n7 = Identifier();
      n6.addNode(n7);
        n9 = jj_consume_token(LPAREN);
      n8 = JTBToolkit.makeNodeToken(n9);
      n6.addNode(n8);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NEW:
        case TRUE:
        case THIS:
        case FALSE:
        case IDENTIFIER:
        case INTEGER:
        case LPAREN:
        case NOT:
        n13 = new NodeListOptional();
        n11 = new NodeSequence(2);
          n12 = Expression();
        n11.addNode(n12);
          label_8:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              ;
              break;
            default:
              jj_la1[15] = jj_gen;
              break label_8;
            }
          n14 = new NodeSequence(2);
            n16 = jj_consume_token(COMMA);
          n15 = JTBToolkit.makeNodeToken(n16);
          n14.addNode(n15);
            n17 = Expression();
          n14.addNode(n17);
          n13.addNode(n14);
          }
        n13.nodes.trimToSize();
        n11.addNode(n13);
        n10.addNode(n11);
          break;
        default:
          jj_la1[16] = jj_gen;
          ;
        }
      n6.addNode(n10);
        n19 = jj_consume_token(RPAREN);
      n18 = JTBToolkit.makeNodeToken(n19);
      n6.addNode(n18);
        if (jj_2_6(2)) {
          n21 = ExpressionLine();
        n20.addNode(n21);
        } else {
          ;
        }
      n6.addNode(n20);
      n0 = new NodeChoice(n6, 1, 2);
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    {if (true) return new ExpressionLineTwo(n0);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("ExpressionLineTwo");
    }
  }

  static final public AExpression AExpression() throws ParseException {
    trace_call("AExpression");
    try {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  Identifier n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NodeSequence n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NewLine n13 = null;
  NodeSequence n14 = null;
  NodeToken n15 = null;
  Token n16 = null;
  Expression n17 = null;
  NodeSequence n18 = null;
  NodeToken n19 = null;
  Token n20 = null;
  Expression n21 = null;
  NodeToken n22 = null;
  Token n23 = null;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
        n2 = jj_consume_token(INTEGER);
      n1 = JTBToolkit.makeNodeToken(n2);
      n0 = new NodeChoice(n1, 0, 8);
        break;
      case TRUE:
        n4 = jj_consume_token(TRUE);
      n3 = JTBToolkit.makeNodeToken(n4);
      n0 = new NodeChoice(n3, 1, 8);
        break;
      case FALSE:
        n6 = jj_consume_token(FALSE);
      n5 = JTBToolkit.makeNodeToken(n6);
      n0 = new NodeChoice(n5, 2, 8);
        break;
      case IDENTIFIER:
        n7 = Identifier();
      n0 = new NodeChoice(n7, 3, 8);
        break;
      case THIS:
        n9 = jj_consume_token(THIS);
      n8 = JTBToolkit.makeNodeToken(n9);
      n0 = new NodeChoice(n8, 4, 8);
        break;
      case NEW:
      n10 = new NodeSequence(2);
        n12 = jj_consume_token(NEW);
      n11 = JTBToolkit.makeNodeToken(n12);
      n10.addNode(n11);
        n13 = NewLine();
      n10.addNode(n13);
      n0 = new NodeChoice(n10, 5, 8);
        break;
      case NOT:
      n14 = new NodeSequence(2);
        n16 = jj_consume_token(NOT);
      n15 = JTBToolkit.makeNodeToken(n16);
      n14.addNode(n15);
        n17 = Expression();
      n14.addNode(n17);
      n0 = new NodeChoice(n14, 6, 8);
        break;
      case LPAREN:
      n18 = new NodeSequence(3);
        n20 = jj_consume_token(LPAREN);
      n19 = JTBToolkit.makeNodeToken(n20);
      n18.addNode(n19);
        n21 = Expression();
      n18.addNode(n21);
        n23 = jj_consume_token(RPAREN);
      n22 = JTBToolkit.makeNodeToken(n23);
      n18.addNode(n22);
      n0 = new NodeChoice(n18, 7, 8);
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    {if (true) return new AExpression(n0);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("AExpression");
    }
  }

  static final public NewLine NewLine() throws ParseException {
    trace_call("NewLine");
    try {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  Expression n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeSequence n9 = null;
  Identifier n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
      n1 = new NodeSequence(4);
        n3 = jj_consume_token(INT);
      n2 = JTBToolkit.makeNodeToken(n3);
      n1.addNode(n2);
        n5 = jj_consume_token(LBRACKET);
      n4 = JTBToolkit.makeNodeToken(n5);
      n1.addNode(n4);
        n6 = Expression();
      n1.addNode(n6);
        n8 = jj_consume_token(RBRACKET);
      n7 = JTBToolkit.makeNodeToken(n8);
      n1.addNode(n7);
      n0 = new NodeChoice(n1, 0, 2);
        break;
      case IDENTIFIER:
      n9 = new NodeSequence(3);
        n10 = Identifier();
      n9.addNode(n10);
        n12 = jj_consume_token(LPAREN);
      n11 = JTBToolkit.makeNodeToken(n12);
      n9.addNode(n11);
        n14 = jj_consume_token(RPAREN);
      n13 = JTBToolkit.makeNodeToken(n14);
      n9.addNode(n13);
      n0 = new NodeChoice(n9, 1, 2);
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    {if (true) return new NewLine(n0);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("NewLine");
    }
  }

  static final public Identifier Identifier() throws ParseException {
    trace_call("Identifier");
    try {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
      n1 = jj_consume_token(IDENTIFIER);
    n0 = JTBToolkit.makeNodeToken(n1);
    {if (true) return new Identifier(n0);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Identifier");
    }
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_3R_15() {
    if (jj_scan_token(PERIOD)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    if (!jj_rescan) trace_call("Expression(LOOKING AHEAD...)");
    if (jj_3R_27()) { if (!jj_rescan) trace_return("Expression(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("Expression(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  static private boolean jj_3_6() {
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3R_9() {
    if (!jj_rescan) trace_call("VarDeclaration(LOOKING AHEAD...)");
    if (jj_3R_11()) { if (!jj_rescan) trace_return("VarDeclaration(LOOKAHEAD FAILED)"); return true; }
    if (jj_3R_12()) { if (!jj_rescan) trace_return("VarDeclaration(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("VarDeclaration(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  static private boolean jj_3R_23() {
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  static private boolean jj_3R_38() {
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_scan_token(LESS)) return true;
    return false;
  }

  static private boolean jj_3R_37() {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_scan_token(AND)) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3R_36() {
    if (jj_scan_token(NEW)) return true;
    return false;
  }

  static private boolean jj_3R_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) return true;
    }
    }
    }
    }
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_35() {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_scan_token(LENGTH)) return true;
    return false;
  }

  static private boolean jj_3R_10() {
    if (!jj_rescan) trace_call("ExpressionLine(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_13()) {
    jj_scanpos = xsp;
    if (jj_3R_14()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) { if (!jj_rescan) trace_return("ExpressionLine(LOOKAHEAD FAILED)"); return true; }
    }
    }
    { if (!jj_rescan) trace_return("ExpressionLine(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  static private boolean jj_3R_26() {
    if (!jj_rescan) trace_call("TypeLine(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_30()) jj_scanpos = xsp;
    { if (!jj_rescan) trace_return("TypeLine(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  static private boolean jj_3R_34() {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    if (!jj_rescan) trace_call("ExpressionLineTwo(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) { if (!jj_rescan) trace_return("ExpressionLineTwo(LOOKAHEAD FAILED)"); return true; }
    }
    { if (!jj_rescan) trace_return("ExpressionLineTwo(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  static private boolean jj_3R_33() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  static private boolean jj_3R_12() {
    if (!jj_rescan) trace_call("Identifier(LOOKING AHEAD...)");
    if (jj_scan_token(IDENTIFIER)) { if (!jj_rescan) trace_return("Identifier(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("Identifier(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  static private boolean jj_3R_32() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  static private boolean jj_3R_31() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    if (!jj_rescan) trace_call("AExpression(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) { if (!jj_rescan) trace_return("AExpression(LOOKAHEAD FAILED)"); return true; }
    }
    }
    }
    }
    }
    }
    }
    { if (!jj_rescan) trace_return("AExpression(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  static private boolean jj_3R_17() {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_scan_token(INT)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3R_11() {
    if (!jj_rescan) trace_call("Type(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) { if (!jj_rescan) trace_return("Type(LOOKAHEAD FAILED)"); return true; }
    }
    }
    { if (!jj_rescan) trace_return("Type(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public eg1TokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[20];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1000,0x1001,0x1000000,0x4000a000,0x4000,0x0,0x4000a000,0x40a20000,0x4000a000,0x0,0x40a20000,0x40a20000,0x0,0x0,0x0,0x0,0xf8000800,0x42000000,0xf8000800,0x40002000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x4,0x0,0x400,0x4,0x4,0x408,0xaa2,0x2ea2,0x1,0x4040,0x0,0x4040,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[6];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public eg1(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public eg1(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new eg1TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public eg1(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new eg1TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public eg1(eg1TokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(eg1TokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    } else {
      trace_scan(jj_scanpos, kind);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[48];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 20; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 48; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  static private int trace_indent = 0;
  static private boolean trace_enabled = true;

/** Enable tracing. */
  static final public void enable_tracing() {
    trace_enabled = true;
  }

/** Disable tracing. */
  static final public void disable_tracing() {
    trace_enabled = false;
  }

  static private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  static private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  static private void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  static private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 6; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}

class JTBToolkit {

  static NodeToken makeNodeToken(final Token t) {
    return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
  }
}
